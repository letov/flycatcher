<?php

namespace Letov\Flycatcher\Modules\Downloader\ArgsSupport;

use Nette\PhpGenerator\PhpNamespace;
use ReflectionClass;
use ReflectionException;

class ArgsSupportCodeGenerator
{
    static function generate()
    {

        $allInterfaces = get_declared_interfaces();
        array_map(function ($interfaceFile)
        {
            require_once $interfaceFile;
        }, glob(__DIR__ . '/ArgInterfaces/*.php'));
        $argInterfaces = array_diff(get_declared_interfaces(), $allInterfaces);
        if (0 == count($argInterfaces)) {
            return;

        }
        $argsSupportInterfaceNamespace = new PhpNamespace('Letov\Flycatcher\Modules\Downloader\ArgsSupport');
        $argsSupportInterface = $argsSupportInterfaceNamespace->addInterface("ArgsSupportInterfacePackage");
        $argsSupportNamespace = new PhpNamespace('Letov\Flycatcher\Modules\Downloader\ArgsSupport');
        $argsSupport = $argsSupportNamespace->addClass("ArgsSupport");
        foreach ($argInterfaces as $argInterface)
        {
            $argsSupportInterface->addExtend($argInterface);
        }
        $argsSupport->addImplement($argsSupportInterface->getName());
        $argsStorage = $argsSupport->addProperty('argsStorage');
        $argsStorage
            ->setType('array')
            ->setPrivate();
        $construct = $argsSupportInterface
            ->addMethod('__construct');
        $construct
            ->addParameter('args')
            ->setType('array');
        $construct = $argsSupport
            ->addMethod('__construct');
        $construct
            ->addParameter('args')
            ->setType('array');
        $construct
            ->addBody('$this->argsStorage = $args;');
        $updateArgs = $argsSupportInterface
            ->addMethod('updateArgs');
        $updateArgs
            ->addParameter('args')
            ->setType('array');
        $updateArgs = $argsSupport
            ->addMethod('updateArgs');
        $updateArgs
            ->addParameter('args')
            ->setType('array');
        $updateArgs
            ->addBody('$this->argsStorage = array_merge($this->argsStorage, $args);');
        $getArg = $argsSupport
            ->addMethod('getArg')
            ->setPrivate();
        $getArg
            ->addParameter('methodName')
            ->setType('string');
        $getArg
            ->addBody('$argName = substr($methodName, 3);')
            ->addBody('return $this->argsStorage[$argName] ?? null;');
        foreach ($argInterfaces as $argInterface)
            try {
                $interface = new ReflectionClass($argInterface);
                $interfaceMethods = $interface->getMethods();
                foreach ($interfaceMethods as $interfaceMethod) {
                    $argsSupportInterface->addMethod($interfaceMethod->name)
                        ->setReturnType($interfaceMethod->getReturnType())
                        ->setReturnNullable();
                    $argsSupport
                        ->addMethod($interfaceMethod->name)
                        ->setReturnType($interfaceMethod->getReturnType())
                        ->setReturnNullable()
                        ->addBody('return $this->getArg(__FUNCTION__);');
                }
            } catch (ReflectionException $e) {
                continue;
            }
        $argsSupportNamespace = str_replace("\\" . $argsSupportInterface->getName(),
            $argsSupportInterface->getName(),
            $argsSupportNamespace);
        file_put_contents(__DIR__ . '/ArgsSupportInterfacePackage.php',
            "<?php\n// autogenerated file\n// DO NOT EDIT\n$argsSupportInterfaceNamespace");
        file_put_contents(__DIR__ . '/ArgsSupport.php',
            "<?php\n// autogenerated file\n// DO NOT EDIT\n$argsSupportNamespace");
    }
}