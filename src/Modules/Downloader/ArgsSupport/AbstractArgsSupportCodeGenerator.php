<?php

namespace Letov\Flycatcher\Modules\Downloader\ArgsSupport;

use Nette\PhpGenerator\PhpNamespace;
use ReflectionClass;
use ReflectionException;

class AbstractArgsSupportCodeGenerator
{
    static function generate()
    {
        $allInterfaces = get_declared_interfaces();
        array_map(function ($interfaceFile)
        {
            require $interfaceFile;
        }, glob(__DIR__ . '/ArgInterfaces/*.php'));
        $argInterfaces = array_diff(get_declared_interfaces(), $allInterfaces);
        $argsSupportNamespace = new PhpNamespace('Letov\Flycatcher\Modules\Downloader\ArgsSupport');
        $abstractArgsSupport = $argsSupportNamespace->addClass("AbstractArgsSupport");
        foreach ($argInterfaces as $argInterface)
        {
            $abstractArgsSupport->addImplement($argInterface);
        }
        $argsStorage = $abstractArgsSupport->addProperty('argsStorage');
        $argsStorage
            ->setType('array')
            ->setProtected();
        $construct = $abstractArgsSupport
            ->addMethod('__construct');
        $construct
            ->addParameter('args')
            ->setType('array');
        $construct
            ->addBody('$this->argsStorage = $args;')
            ->addBody('$this->setArgsToClient();');
        $updateArg = $abstractArgsSupport
            ->addMethod('updateArg');
        $updateArg
            ->addParameter('args')
            ->setType('array');
        $updateArg
            ->addBody('$this->argsStorage = array_merge($this->argsStorage, $args);')
            ->addBody('$this->setArgsToClient();');
        $abstractArgsSupport
            ->addMethod('setArgsToClient')
            ->setProtected();
        $getArg = $abstractArgsSupport
            ->addMethod('getArg')
            ->setProtected();
        $getArg
            ->addParameter('methodName')
            ->setType('string');
        $getArg
            ->addBody('$argName = substr($methodName, 3);')
            ->addBody('return $this->argsStorage[$argName] ?? null;');
        foreach ($argInterfaces as $argInterface)
            try {
                $interface = new ReflectionClass($argInterface);
                $interfaceMethods = $interface->getMethods();
                if (1 != count($interfaceMethods)) {
                    continue;
                }
                $interfaceMethod = $interfaceMethods[0];
                $abstractArgsSupport
                    ->addMethod($interfaceMethod->name)
                    ->setReturnType($interfaceMethod->getReturnType())
                    ->setReturnNullable()
                    ->addBody('return $this->getArg(__FUNCTION__);');
            } catch (ReflectionException $e) {
                continue;
            }
        // PhpGenerator does not support abstract classes
        $argsSupportNamespace = str_replace("class", "abstract class", $argsSupportNamespace);
        $argsSupportNamespace = str_replace("protected function setArgsToClient()\n	{\n	}",
            "abstract protected function setArgsToClient();", $argsSupportNamespace);
        file_put_contents(__DIR__ . '/AbstractArgsSupport.php',
            "<?php\n// autogenerated file\n// DO NOT EDIT\n$argsSupportNamespace");
    }
}